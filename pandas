import pandas as pd

* Series: a list-like Pandas object
    * labels = ['a','b','c']
    * my_data = [10,20,30]
    * arr = np.array(my_data)
    * d = {'a':10,'b':20,'c':30}
    * s1=pd.Series(data=my_data, name='s1') (youâ€™ll get default labels 0, 1, 2, ..)
    * s2=pd.Series(data=my_data, index=labels, name='s2')
    * s3=pd.Series(data=arr, index=labels, name='s3')
    * s4=pd.Series(data=d, name='s4')
    
* DataFrame
    * What is a DataFrame?
        * a two-dimensional Pandas data structure
        * columns represent features, rows represent items
        ** If constructed using a dictionary, columns are keys and rows are values
        * analogous to an Excel spreadsheet or SQL table
        * It's helpful to think of a DataFrame as actually being just a bunch of Series glued together
    * Method 1
        * matrix_data = np.random.randint(1,20,size=20).reshape(5,4)
        * row_labels = ['A','B','C','D','E']
        * column_headings = ['W','X','Y','Z']
        * df = pd.DataFrame(data=matrix_data, index=row_labels, columns=column_headings)
    * Method 2
        * d={'a':[10,20],'b':[30,40],'c':[50,60]}
        * df2=pd.DataFrame(data=d,index=['X','Y'])
    * Method 3
        * df3 = pd.read_csv("Data/wine.data.csv")
        * default indices are 0, 1, 2.. but if you want a specific column to be the index, use index_col=<column_number>
    * Method 4
        * df4 = pd.read_excel("./Data/Height_Weight.xlsx")
    
* Writing to CSV
    * df.to_csv(path_or_buf="file_path")

* Writing to Excel
    * df.to_excel("file path")
    * Specific sheet df.to_excel("file_path", sheet_name="sheet1")
    * Multiple sheets
    ** with pd.ExcelWriter("path to excel") as writer:
         df1.to_excel(writer, sheet_name="sheet1")
         df2.to_excel(writer, sheet_name="sheet2")
        
* Quick checking DataFrame
    * df3.shape
    * df3.head()
    * df3.head(3)
    * df3.tail(7)
    * df3.sample(5)
    * df3.info()
    * df3.describe().transpose()
    * df4.describe() or df4.column.describe()
    * df4.column.unique()
    * df4.column.value_counts()
    * df4.dtypes
    
* Descriptive stats on DataFrame (can also be called on individual columns)
    * df3.mean()
    * df3.std()
    * df4.var()
    * df4.min()
    * df4.max()
    
* Indexing, slicing
    * df4['Name'] or df4.Name
    * df4[['Name','Weight']]
    * Label-based 'loc' method can be used for selecting row(s)
        * df.loc['C']
        * df.loc[['B','C']]
    * Index position based 'iloc' method can be used for selecting row(s)
        * df.iloc[2]
        * df.iloc[[1,2]]
    * Choosing between loc and iloc:
        * When choosing or transitioning between loc and iloc, 
          there is one "gotcha" worth keeping in mind, which is that the two 
          methods use slightly different indexing schemes. iloc uses the Python 
          stdlib indexing scheme, where the first element of the range is included
          and the last one excluded. So 0:10 will select entries 0,...,9. loc, 
          meanwhile, indexes inclusively. So 0:10 will select entries 0,...,10.
        * Why the change? Remember that loc can index any stdlib type: strings, 
          for example. If we have a DataFrame with index values Apples, ..., 
          Potatoes, ..., and we want to select "all the alphabetical fruit choices
          between Apples and Potatoes", then it's a lot more convenient to index 
          df.loc['Apples':'Potatoes'] than it is to index something like 
          df.loc['Apples', 'Potatoet] (t coming after s in the alphabet).
        * This is particularly confusing when the DataFrame index is a simple 
          numerical list, e.g. 0,...,1000. In this case df.iloc[0:1000] will 
          return 1000 entries, while df.loc[0:1000] return 1001 of them! To get 
          1000 elements using loc, you will need to go one lower and ask for
          df.iloc[0:999].
        * Otherwise, the semantics of using loc are the same as those for iloc.
        
* Conditional subsetting
    * df4['Height']>155
    * df4[df4['Height']>155]
    * df4[(df4['Height']>155) & (df4['Weight']<140)]
    
* Operations on specific rows/columns
    * df3[['Magnesium','Ash']].std()
    * range_alcohol=df3['Alcohol'].max()- df3['Alcohol'].min()
    * np.percentile(df3['Flavanoids'],95) - Top 5 percentile in terms of Flavanoids?
    * df3[df3['Flavanoids']>=3.4975]
    * df3[df3['Flavanoids']>=3.4975][['Ash','Alcohol','Magnesium']].mean() - 
      Show the average alcohol, ash, and magnesium content of the wine brands which rank top 5 percent in terms of flavanoids
      
* Create new column as a function of existing columns
    * df4['BMI']=df4['Weight']*0.453592/(df4['Height']/100)**2
    * df4.sort_values(by='BMI')
    * df4.sort_values(by='BMI',inplace=True) - Use inplace=True to make the changes reflected on the original DataFrame

* Grouping
    * reviews.groupby('points').points.count()
    * reviews.groupby('points').price.min()
    * reviews.groupby('winery').apply(lambda df: df.title.iloc[0])
    * Multi-indexing
        * reviews.groupby(['country', 'province']).apply(lambda df: df.loc[df.points.idxmax()])
        * reviews.reset_index()
    * Run bunch of functions simultaneously on the dataset
        * reviews.groupby(['country']).price.agg([len, min, max])

* Sorting
    * reviews.sort_values(by='column', ascending=False)
    * reviews.sort_index()
    * reviews.sort_values(by=['column1', 'column2'])
    
* Datatypes
    * reviews.points.astype('float64')
    
* Missing data
    * Missing data = NaN (datatype = float64 by default)
    * reviews[pd.isnull(reviews.country)]
    * reviews.region_2.fillna("Unknown")
    * reviews.taster_twitter_handle.replace("@kerinokeefe", "@kerino")

* Renaming
    * reviews.rename(columns={'points': 'score'})
    
*    
* Visualization
*
    * Set style
        * # Just to set the Matplotlib style to default
        * import matplotlib as mpl
        * mpl.rcParams.update(mpl.rcParamsDefault)
    * Scatter plot
        * df.plot.scatter('Alcohol','Color intensity')
        * plt.show()
    * Histogram
        * df['Alcohol'].plot.hist(bins=20,figsize=(5,5),edgecolor='k')
        * plt.xlabel('Alcohol percentage')
        * plt.show()